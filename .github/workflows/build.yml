name: Build Modules

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      # ðŸ†• Check latest pre-release tag from anddea/revanced-patches
      - name: Check latest patch version
        id: latest_patch
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p build
          TAG_FILE=build/.last-tag

          # Get latest pre-release tag
          latest_tag=$(gh api repos/anddea/revanced-patches/releases \
            --jq 'map(select(.prerelease)) | first.tag_name')
          echo "Latest tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> $GITHUB_OUTPUT

          # Compare with stored tag
          if [ -f "$TAG_FILE" ]; then
            stored_tag=$(cat "$TAG_FILE")
            echo "Stored tag: $stored_tag"
          else
            stored_tag="none"
            echo "No tag stored yet"
          fi

          if [ "$stored_tag" = "$latest_tag" ]; then
            echo "No update in patch version. Skipping build."
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          else
            echo "$latest_tag" > $TAG_FILE
            echo "SKIP_BUILD=false" >> $GITHUB_ENV
          fi

      - name: Exit if no new patch version
        if: env.SKIP_BUILD == 'true'
        run: |
          echo "Build skipped because no new patch version found."
          exit 0

      - name: Get today's date
        id: date
        run: echo "TODAY=$(date -u +'%Y-%m-%d')" >> $GITHUB_OUTPUT

      - name: Update config
        run: |
          if git checkout origin/update build.md 2>/dev/null; then
            if [ -f "./build.sh" ] && [ -f "config.toml" ]; then
              UPDATE_CFG=$(./build.sh config.toml --config-update 2>/dev/null || echo "")
              if [ -n "$UPDATE_CFG" ]; then
                echo "$UPDATE_CFG" > config.json
              fi
            fi
          fi

      - name: Get next version
        id: version
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 || echo "0")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            LATEST_TAG="0"
          fi
          NEXT_VERSION=$((LATEST_TAG + 1))
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION"

      - name: Build modules and APKs
        run: |
          if [ -f "config.json" ]; then
            ./build.sh config.json
          elif [ -f "config.toml" ]; then
            ./build.sh config.toml
          else
            echo "No config file found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          NEXT_VER_CODE: ${{ steps.version.outputs.NEXT_VERSION }}

      - name: Prepare build output
        id: build_info
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          cd build
          FILES=$(ls -1 | grep '\.apk$' | tr '\n' ',' | sed 's/,$//')
          COUNT=$(ls -1 | grep '\.apk$' | wc -l)
          echo "BUILD_COUNT=$COUNT" >> $GITHUB_OUTPUT
          echo "BUILD_FILES=$FILES" >> $GITHUB_OUTPUT
          if [ -f "../build.md" ]; then
            cp ../build.md changelog.md
          else
            echo "Automated build $(date)" > changelog.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.date.outputs.TODAY }}
          name: ReX ${{ steps.date.outputs.TODAY }}
          body_path: build/changelog.md
          files: build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Telegram notification
        if: always()
        run: |
          if [ -d "build" ]; then
            cd build
            FILE_LIST=$(ls -1 2>/dev/null | head -5 | tr '\n' ',' | sed 's/,$//' || echo "No files")
            FILE_COUNT=$(ls -1 2>/dev/null | wc -l || echo "0")
            STATUS="SUCCESS"
            cd ..
          else
            FILE_LIST="No files built"
            FILE_COUNT="0"
            STATUS="FAILED"
          fi

          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ steps.date.outputs.TODAY }}"

          MESSAGE="ReVanced Build Complete 
          Status: $STATUS 
          Build: ${{ steps.date.outputs.TODAY }} 
          Files: $FILE_COUNT 
          Release: $RELEASE_URL 
          Built: $FILE_LIST 
          Time: $(date -u)"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMessage" \
            -d "chat_id=717601421" \
            -d "text=$MESSAGE" \
            -d "disable_web_page_preview=true" || echo "Telegram notification failed"

          echo "Notification sent!"
