name: Build Modules

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Update config
        run: |
          if git checkout origin/update build.md 2>/dev/null; then
            if [ -f "./build.sh" ] && [ -f "config.toml" ]; then
              UPDATE_CFG=$(./build.sh config.toml --config-update 2>/dev/null || echo "")
              if [ -n "$UPDATE_CFG" ]; then
                echo "$UPDATE_CFG" > config.json
              fi
            fi
          fi

      - name: Get next version
        id: version
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 || echo "0")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            LATEST_TAG="0"
          fi
          NEXT_VERSION=$((LATEST_TAG + 1))
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION"

      - name: Build modules and APKs
        run: |
          if [ -f "config.json" ]; then
            ./build.sh config.json
          elif [ -f "config.toml" ]; then
            ./build.sh config.toml
          else
            echo "No config file found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          NEXT_VER_CODE: ${{ steps.version.outputs.NEXT_VERSION }}

      - name: Prepare build output
        id: build_info
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          
          cd build
          FILES=$(ls -la)
          COUNT=$(ls -1 | wc -l)
          echo "BUILD_COUNT=$COUNT" >> $GITHUB_OUTPUT
          
          FILE_LIST=$(ls -1 2>/dev/null | head -5 | tr '\n' ',' | sed 's/,$//' || echo "No files")

          if [ -f "../build.md" ]; then
            cp ../build.md changelog.md
          else
            echo "Automated build $(date)" > changelog.md
          fi
          
          # Export FILE_LIST for use in next step
          echo "FILE_LIST=$FILE_LIST" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.NEXT_VERSION }}
          name: "ReX $(date -u +'%Y-%m-%d')"
          body_path: build/changelog.md
          files: build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Telegram notification
        if: always()
        run: |
          if [ -d "build" ]; then
            STATUS="‚úÖ SUCCESS"
          else
            STATUS="‚ùå FAILED"
          fi
          
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.NEXT_VERSION }}"
          
          # Escape markdown special chars in FILE_LIST for MarkdownV2 formatting
          ESCAPED_FILE_LIST=$(echo "${{ steps.build_info.outputs.FILE_LIST }}" | sed -E 's/([\_\*ÓÄÅÓÄÅÓÄÅÓÄÅ\~\`\>\#\+\-\=\|\{\}\.\!])/\\\1/g')

          MESSAGE="üéâ *ReVanced Build Complete*\n\n_Status:_ $STATUS\n_Build:_ *${{ steps.version.outputs.NEXT_VERSION }}*\n_Files:_ *${{ steps.build_info.outputs.BUILD_COUNT }}*\n_Built:_ \`${ESCAPED_FILE_LIST}\`\n_Time:_ $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n\n‚¨áÔ∏è Click the button below to download"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "717601421",
              "text": "'"$MESSAGE"'",
              "parse_mode": "MarkdownV2",
              "disable_web_page_preview": true,
              "reply_markup": {
                "inline_keyboard": [[
                  { "text": "Download Build", "url": "'"$RELEASE_URL"'" }
                ]]
              }
            }' || echo "Telegram notification failed"
          
          echo "Notification sent!"
