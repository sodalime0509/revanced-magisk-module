name: Build Modules

on:
  workflow_call:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write-all

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Update config
        run: |
          if git checkout origin/update build.md 2>/dev/null; then
            if [ -f "./build.sh" ] && [ -f "config.toml" ]; then
              UPDATE_CFG=$(./build.sh config.toml --config-update 2>/dev/null || echo "")
              if [ -n "$UPDATE_CFG" ]; then
                echo "$UPDATE_CFG" > config.json
              fi
            fi
          fi

      - name: Get next version
        id: version
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 || echo "0")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            LATEST_TAG="0"
          fi
          NEXT_VERSION=$((LATEST_TAG + 1))
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION"

      - name: Build modules and APKs
        run: |
          if [ -f "config.json" ]; then
            ./build.sh config.json
          elif [ -f "config.toml" ]; then
            ./build.sh config.toml
          else
            echo "No config file found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          NEXT_VER_CODE: ${{ steps.version.outputs.NEXT_VERSION }}

      - name: Prepare build output
        id: build_info
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi

          cd build
          FILES=$(ls -1 | grep '\.apk$' | tr '\n' ',' | sed 's/,$//')
          COUNT=$(ls -1 | grep '\.apk$' | wc -l)
          echo "BUILD_COUNT=$COUNT" >> $GITHUB_OUTPUT
          echo "BUILD_FILES=$FILES" >> $GITHUB_OUTPUT

          if [ -f "../build.md" ]; then
            cp ../build.md changelog.md
          else
            echo "Automated build $(date)" > changelog.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.NEXT_VERSION }}
          name: ReX ${{ github.event.head_commit.timestamp || env.RELEASE_DATE }}
          body_path: build/changelog.md
          files: build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_DATE: ${{ github.event.repository.pushed_at }}

      - name: Send Telegram Message with Attachments
        if: always()
        run: |
          cd build
          FILES=$(ls -1 *.apk 2>/dev/null)
          FILE_COUNT=$(echo "$FILES" | wc -l)
          FILE_NAMES=$(echo "$FILES" | paste -sd "," -)
          STATUS="âœ… SUCCESS"
          DATE=$(date -u '+%Y-%m-%d %H:%M UTC')

          MSG="<b>ðŸŽ‰ ReVanced Build Complete</b>%0A<b>Status:</b> ${STATUS}%0A<b>Build:</b> ${{ steps.version.outputs.NEXT_VERSION }}%0A<b>Files:</b> ${FILE_COUNT}%0A<b>Built:</b> ${FILE_NAMES}%0A<b>Time:</b> ${DATE}"

          for FILE in $FILES; do
            curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendDocument" \
              -F chat_id=717601421 \
              -F caption="$MSG" \
              -F parse_mode=HTML \
              -F document=@"$FILE"
          done
