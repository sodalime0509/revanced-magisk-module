name: Build Modules

on:
  workflow_call:
    inputs:
      PATCHES_VERSION:
        required: true
        type: string
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Save PATCHES_VERSION
        id: save_patch
        run: echo "PATCHES_VERSION=${{ inputs.PATCHES_VERSION }}" >> $GITHUB_ENV

      - name: Update config
        run: |
          if git checkout origin/update build.md 2>/dev/null; then
            if [ -f "./build.sh" ] && [ -f "config.toml" ]; then
              UPDATE_CFG=$(./build.sh config.toml --config-update 2>/dev/null || echo "")
              if [ -n "$UPDATE_CFG" ]; then
                echo "$UPDATE_CFG" > config.json
              fi
            fi
          fi

      - name: Build modules and APKs
        run: |
          if [ -f "config.json" ]; then
            ./build.sh config.json
          elif [ -f "config.toml" ]; then
            ./build.sh config.toml
          else
            echo "No config file found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PATCHES_VERSION: ${{ env.PATCHES_VERSION }}

      - name: Prepare build output
        id: build_info
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          cd build
          FILES=$(ls -1 | grep '\.apk$' | tr '\n' ',' | sed 's/,$//')
          COUNT=$(ls -1 | grep '\.apk$' | wc -l)
          echo "BUILD_COUNT=$COUNT" >> $GITHUB_OUTPUT
          echo "BUILD_FILES=$FILES" >> $GITHUB_OUTPUT
          if [ -f "../build.md" ]; then
            cp ../build.md changelog.md
          else
            echo "ReX $PATCHES_VERSION Build" > changelog.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.PATCHES_VERSION }}
          name: ReX ${{ env.PATCHES_VERSION }}
          body_path: build/changelog.md
          files: build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit built version to update branch
        run: |
          echo "${{ env.PATCHES_VERSION }}" > build.md
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add build.md
          git commit -m "Build ReX ${{ env.PATCHES_VERSION }}" || echo "Nothing to commit"
          git push origin HEAD:update || echo "Push failed"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Telegram notification
        if: always()
        run: |
          if [ -d "build" ]; then
            cd build
            FILE_LIST=$(ls -1 2>/dev/null | head -5 | tr '\n' ',' | sed 's/,$//' || echo "No files")
            FILE_COUNT=$(ls -1 2>/dev/null | wc -l || echo "0")
            STATUS="SUCCESS"
            cd ..
          else
            FILE_LIST="No files built"
            FILE_COUNT="0"
            STATUS="FAILED"
          fi

          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ env.PATCHES_VERSION }}"

          MESSAGE="ReVanced Build Complete 
          Status: $STATUS 
          Build: $PATCHES_VERSION 
          Files: $FILE_COUNT 
          Release: $RELEASE_URL 
          Built: $FILE_LIST 
          Time: $(date -u)"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TG_TOKEN }}/sendMessage" \
            -d "chat_id=717601421" \
            -d "text=$MESSAGE" \
            -d "disable_web_page_preview=true" || echo "Telegram notification failed"
