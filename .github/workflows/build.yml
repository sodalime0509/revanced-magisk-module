name: Build Modules

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Update config
        run: |
          if git checkout origin/update build.md 2>/dev/null; then
            if [ -f "./build.sh" ] && [ -f "config.toml" ]; then
              UPDATE_CFG=$(./build.sh config.toml --config-update 2>/dev/null || echo "")
              if [ -n "$UPDATE_CFG" ]; then
                echo "$UPDATE_CFG" > config.json
              fi
            fi
          fi

      - name: Get next version
        id: version
        run: |
          LATEST_TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases/latest" | grep -o '"tag_name": "[^"]*' | cut -d'"' -f4 || echo "0")
          if [ -z "$LATEST_TAG" ] || [ "$LATEST_TAG" = "null" ]; then
            LATEST_TAG="0"
          fi
          NEXT_VERSION=$((LATEST_TAG + 1))
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_OUTPUT
          echo "Next version will be: $NEXT_VERSION"

      - name: Build modules and APKs
        run: |
          if [ -f "config.json" ]; then
            ./build.sh config.json
          elif [ -f "config.toml" ]; then
            ./build.sh config.toml
          else
            echo "No config file found!"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          NEXT_VER_CODE: ${{ steps.version.outputs.NEXT_VERSION }}

      - name: Prepare build output
        id: build_info
        run: |
          if [ ! -d "build" ]; then
            echo "Build directory not found!"
            exit 1
          fi
          
          cd build
          FILES=$(ls -la)
          COUNT=$(ls -1 | wc -l)
          echo "BUILD_COUNT=$COUNT" >> $GITHUB_OUTPUT
          
          if [ -f "../build.md" ]; then
            cp ../build.md changelog.md
          else
            echo "Automated build $(date)" > changelog.md
          fi

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.NEXT_VERSION }}
          name: "ReVanced Build ${{ steps.version.outputs.NEXT_VERSION }}"
          body_path: build/changelog.md
          files: build/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update repository
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          if git checkout update 2>/dev/null; then
            echo "Switched to existing update branch"
          else
            git checkout --orphan update
            echo "Created new update branch"
          fi
          
          if [ -f "build.md" ]; then
            cp build.md update_log.md
          fi
          
          if [ -d "build" ]; then
            cd build
            for file in *.zip; do
              if [ -f "$file" ] && [[ $file == *"magisk"* ]]; then
                JSON_FILE="../${file%.*}-update.json"
                echo "{" > "$JSON_FILE"
                echo "  \"version\": \"v${{ steps.version.outputs.NEXT_VERSION }}\"," >> "$JSON_FILE"
                echo "  \"versionCode\": ${{ steps.version.outputs.NEXT_VERSION }}," >> "$JSON_FILE"
                echo "  \"zipUrl\": \"https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.NEXT_VERSION }}/$file\"," >> "$JSON_FILE"
                echo "  \"changelog\": \"https://raw.githubusercontent.com/${{ github.repository }}/update/build.md\"" >> "$JSON_FILE"
                echo "}" >> "$JSON_FILE"
              fi
            done
            cd ..
          fi
          
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update build ${{ steps.version.outputs.NEXT_VERSION }}"
            git push origin update --force
          fi

      - name: Send Telegram notification
        if: always()
        run: |
          if [ -d "build" ]; then
            cd build
            FILE_LIST=$(ls -1 2>/dev/null | head -5 | tr '\n' ',' | sed 's/,$//' || echo "No files")
            FILE_COUNT=$(ls -1 2>/dev/null | wc -l || echo "0")
            STATUS="SUCCESS"
            cd ..
          else
            FILE_LIST="No files built"
            FILE_COUNT="0"
            STATUS="FAILED"
          fi
          
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.NEXT_VERSION }}"
          
          MESSAGE="ReVanced Build Complete - Status: $STATUS - Build: ${{ steps.version.outputs.NEXT_VERSION }} - Files: $FILE_COUNT - Release: $RELEASE_URL - Built: $FILE_LIST - Time: $(date -u)"

          curl -s -X POST "https://api.telegram.org/bot7895827988:AAHupsejGicKxN8dnD3KxB3kDPwmSBGf2g8l/sendMessage" \
            -d "chat_id=717601421" \
            -d "text=$MESSAGE" \
            -d "disable_web_page_preview=true" || echo "Telegram notification failed"
          
          echo "Notification sent!"
