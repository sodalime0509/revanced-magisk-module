name: Build Modules

on:
  workflow_call:
    inputs:
      PATCHES_VERSION:
        required: true
        type: string
  workflow_dispatch:
    inputs:
      PATCHES_VERSION:
        description: 'Patches version to build (leave empty to auto-detect latest)'
        required: false
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "17"

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make build script executable
        run: chmod +x build.sh

      - name: Save PATCHES_VERSION
        id: save_patch
        run: |
          # If PATCHES_VERSION is not provided (manual run), try to auto-detect
          if [ -z "${{ inputs.PATCHES_VERSION }}" ] || [ "${{ inputs.PATCHES_VERSION }}" = "null" ]; then
            echo "⚠️ PATCHES_VERSION not provided, attempting to auto-detect latest version..."
            
            # Fetch the latest version from GitHub API
            RESPONSE=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/anddea/revanced-patches/releases?per_page=1")
            
            AUTO_VERSION=$(echo "$RESPONSE" | jq -r '.[0].tag_name // empty')
            
            if [ -z "$AUTO_VERSION" ] || [ "$AUTO_VERSION" = "null" ]; then
              echo "❌ ERROR: Could not auto-detect PATCHES_VERSION and none was provided"
              echo "Please provide a PATCHES_VERSION when running manually"
              exit 1
            fi
            
            echo "✅ Auto-detected version: $AUTO_VERSION"
            echo "PATCHES_VERSION=$AUTO_VERSION" >> $GITHUB_ENV
            echo "🏷️ Building ReVanced Extended with auto-detected patches version: $AUTO_VERSION"
          else
            echo "PATCHES_VERSION=${{ inputs.PATCHES_VERSION }}" >> $GITHUB_ENV
            echo "🏷️ Building ReVanced Extended with patches version: ${{ inputs.PATCHES_VERSION }}"
          fi

      # ... rest of your steps remain the same ...
