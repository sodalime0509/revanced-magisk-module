name: CI

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */2 * * *"  # Runs every 2 hours to be less aggressive

jobs:
  check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write
    outputs:
      SHOULD_BUILD: ${{ steps.should_build.outputs.SHOULD_BUILD }}
      PATCHES_VERSION: ${{ steps.should_build.outputs.PATCHES_VERSION }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if new patch version is available
        id: should_build
        run: |
          echo "üîç Checking for new ReVanced Extended patches (including pre-releases)..."
          
          # Fetch ALL releases (including pre-releases) with authentication
          RESPONSE=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/anddea/revanced-patches/releases?per_page=10")
          
          # Extract the most recent release (first in the list, whether stable or pre-release)
          PATCHES_VERSION=$(echo "$RESPONSE" | jq -r '.[0].tag_name // empty')
          IS_PRERELEASE=$(echo "$RESPONSE" | jq -r '.[0].prerelease // false')
          RELEASE_NAME=$(echo "$RESPONSE" | jq -r '.[0].name // empty')
          
          if [ -z "$PATCHES_VERSION" ] || [ "$PATCHES_VERSION" = "null" ]; then
            echo "‚ùå Failed to fetch latest version from API"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          if [ "$IS_PRERELEASE" = "true" ]; then
            echo "üì¶ Latest version: $PATCHES_VERSION (üöß Pre-release)"
          else
            echo "üì¶ Latest version: $PATCHES_VERSION (‚úÖ Stable release)"
          fi
          
          # Check previously built version
          BUILT_VERSION=""
          if git ls-remote --heads origin update | grep -q update; then
            echo "üìã Update branch exists, checking last built version..."
            if git checkout origin/update -- build.md 2>/dev/null && [ -f build.md ]; then
              BUILT_VERSION=$(cat build.md | tr -d '\n\r' | xargs)
              echo "üè∑Ô∏è Previously built version: $BUILT_VERSION"
            else
              echo "üìù No build.md found in update branch"
            fi
          else
            echo "üÜï No update branch found - first build"
          fi
          
          # Compare versions
          if [ "$BUILT_VERSION" = "$PATCHES_VERSION" ]; then
            echo "‚úÖ Already built version $PATCHES_VERSION - skipping build"
            echo "SHOULD_BUILD=0" >> $GITHUB_OUTPUT
          else
            echo "üöÄ New version detected: $PATCHES_VERSION (previous: ${BUILT_VERSION:-none})"
            echo "SHOULD_BUILD=1" >> $GITHUB_OUTPUT
          fi
          
          echo "PATCHES_VERSION=$PATCHES_VERSION" >> $GITHUB_OUTPUT

      - name: Clean up old workflow runs
        if: success()
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üßπ Cleaning up old workflow runs..."
          
          # Install GitHub CLI if not available
          if ! command -v gh &> /dev/null; then
            echo "Installing GitHub CLI..."
            type -p curl >/dev/null || sudo apt update && sudo apt install curl -y
            curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
            sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
            sudo apt update && sudo apt install gh -y
          fi
          
          # Clean up old runs (keep last 15 runs)
          echo "Fetching workflow runs..."
          RUNS_TO_DELETE=$(gh run list --limit 100 --json databaseId --jq '.[15:] | .[].databaseId' 2>/dev/null || echo "")
          
          if [ -n "$RUNS_TO_DELETE" ]; then
            echo "Deleting old workflow runs..."
            echo "$RUNS_TO_DELETE" | while read -r run_id; do
              [ -n "$run_id" ] && gh api "repos/$GITHUB_REPOSITORY/actions/runs/$run_id" -X DELETE 2>/dev/null || true
            done
            echo "‚úÖ Cleanup completed"
          else
            echo "‚ÑπÔ∏è No old runs to clean up"
          fi

  build:
    needs: check
    if: needs.check.outputs.SHOULD_BUILD == '1'
    permissions:
      contents: write
      actions: read
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      PATCHES_VERSION: ${{ needs.check.outputs.PATCHES_VERSION }}
